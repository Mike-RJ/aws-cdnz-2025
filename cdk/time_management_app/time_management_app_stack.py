import aws_cdk as cdk
from aws_cdk import CfnOutput, Duration, RemovalPolicy, Stack
from aws_cdk import aws_apigateway as apigateway
from aws_cdk import aws_dynamodb as dynamodb
from aws_cdk import aws_iam as iam
from aws_cdk import aws_lambda as _lambda
from aws_cdk import aws_s3 as s3
from aws_cdk import aws_s3_deployment as s3deploy
from aws_cdk import custom_resources as cr
from constructs import Construct


class TimeManagementAppStack(Stack):
    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:
        super().__init__(scope, construct_id, **kwargs)

        # DynamoDB Table
        table = dynamodb.Table(
            self,
            "TimeEntriesTable",
            partition_key=dynamodb.Attribute(
                name="id", type=dynamodb.AttributeType.STRING
            ),
            billing_mode=dynamodb.BillingMode.PAY_PER_REQUEST,
            removal_policy=RemovalPolicy.DESTROY,
        )

        # Lambda Function
        lambda_function = _lambda.Function(
            self,
            "TimeManagementFunction",
            runtime=_lambda.Runtime.PYTHON_3_11,
            code=_lambda.Code.from_asset("lambda"),
            handler="app.lambda_handler",
            environment={"TABLE_NAME": table.table_name},
            timeout=Duration.seconds(30),
        )

        # Grant permissions
        table.grant_read_write_data(lambda_function)

        # API Gateway - using LambdaRestApi (proven to work with LocalStack)
        api = apigateway.LambdaRestApi(
            self,
            "TimeManagementApi",
            handler=lambda_function,
            rest_api_name="time-management-api",
            description="API for Time Management Application",
            default_cors_preflight_options=apigateway.CorsOptions(
                allow_origins=apigateway.Cors.ALL_ORIGINS,
                allow_methods=apigateway.Cors.ALL_METHODS,
                allow_headers=[
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                ],
            ),
        )

        # S3 Bucket for Frontend
        bucket = s3.Bucket(
            self,
            "TimeManagementFrontendBucket",
            website_index_document="index.html",
            public_read_access=True,
            removal_policy=RemovalPolicy.DESTROY,
            auto_delete_objects=True,
        )

        # Deploy frontend to S3
        deploy_frontend = s3deploy.BucketDeployment(
            self,
            "DeployFrontend",
            sources=[s3deploy.Source.asset("frontend")],
            destination_bucket=bucket,
            prune=False,
            retain_on_delete=True,
        )

        # Work around LocalStack delete bug: retain the custom resource so Delete isn't invoked
        default_child = deploy_frontend.node.default_child
        if isinstance(default_child, cdk.CfnResource):
            default_child.cfn_options.deletion_policy = cdk.CfnDeletionPolicy.RETAIN
            default_child.cfn_options.update_replace_policy = cdk.CfnDeletionPolicy.RETAIN

        # After API and frontend are created, write config.js into the bucket with the API endpoint
        # Build LocalStack edge URL using localhost.localstack.cloud to avoid SSL CN mismatch
        rest_api_id = api.rest_api_id
        edge_api_url = (
            f"https://localhost.localstack.cloud:4566/restapis/{rest_api_id}/prod/_user_request_"
        )
        config_body = (
            "// Generated by CDK during deployment\n"
            "window.APP_CONFIG = {\n"
            f"    API_BASE_URL: '{edge_api_url}',\n"
            f"    \"API_ENDPOINT\": \"{edge_api_url}\"\n"
            "};\n"
        )

        # Ensure API Gateway sends CORS headers for 4xx/5xx as well
        apigateway.GatewayResponse(
            self,
            "Default4xxCors",
            rest_api=api,
            type=apigateway.ResponseType.DEFAULT_4_XX,
            response_headers={
                "Access-Control-Allow-Origin": "'*'",
                "Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'",
            },
        )
        apigateway.GatewayResponse(
            self,
            "Default5xxCors",
            rest_api=api,
            type=apigateway.ResponseType.DEFAULT_5_XX,
            response_headers={
                "Access-Control-Allow-Origin": "'*'",
                "Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE,OPTIONS'",
            },
        )

        write_config = cr.AwsCustomResource(
            self,
            "WriteFrontendConfig",
            on_create=cr.AwsSdkCall(
                service="S3",
                action="putObject",
                parameters={
                    "Bucket": bucket.bucket_name,
                    "Key": "config.js",
                    "ContentType": "application/javascript",
                    "Body": config_body,
                },
                physical_resource_id=cr.PhysicalResourceId.of("WriteConfigOnCreate"),
            ),
            on_update=cr.AwsSdkCall(
                service="S3",
                action="putObject",
                parameters={
                    "Bucket": bucket.bucket_name,
                    "Key": "config.js",
                    "ContentType": "application/javascript",
                    "Body": config_body,
                },
                physical_resource_id=cr.PhysicalResourceId.of("WriteConfigOnUpdate"),
            ),
            policy=cr.AwsCustomResourcePolicy.from_statements(
                [
                    iam.PolicyStatement(
                        actions=["s3:PutObject"],
                        resources=[f"{bucket.bucket_arn}/*"],
                    )
                ]
            ),
        )

        # Ensure ordering
        write_config.node.add_dependency(api)
        write_config.node.add_dependency(deploy_frontend)

        # Outputs
        CfnOutput(
            self,
            "ApiEndpoint",
            value=api.url,
            description="Direct API Gateway endpoint URL",
        )
        CfnOutput(
            self,
            "FrontendURL",
            value=(
                f"http://{bucket.bucket_name}."
                "s3-website.localhost.localstack.cloud:4566"
            ),
            description="Frontend URL (LocalStack)",
        )
